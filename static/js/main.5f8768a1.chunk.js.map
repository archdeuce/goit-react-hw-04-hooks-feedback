{"version":3,"sources":["components/Section/Section.js","components/Notification/Notification.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","className","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","index","id","name","value","type","onClick","App","useState","setBad","setGood","setNeutral","toFixed","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f8768a1.chunk.js","sourcesContent":["import './Section.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Section({ title, children }) {\n  return (\n    <section className=\"Section__container\">\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.array.isRequired,\n};\n","import './Notification.css';\nimport PropTypes from 'prop-types';\n\nexport default function Notification({ message }) {\n  return (\n    <div className=\"Notification__container\">\n      <h3 className=\"Notification__title\">{message}</h3>\n    </div>\n  );\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import './Statistics.css';\nimport React from 'react';\nimport Notification from '../Notification/';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div className=\"Statistics__container\">\n      <h2>Statistics</h2>\n\n      {total === 0 ? (\n        <Notification message=\"No feedback given\" />\n      ) : (\n        <ul className=\"Statistics__list\">\n          <li className=\"Statistics__list-item\">\n            <span className=\"Statistics__list-item-title\">Good:</span>\n            <span className=\"Statistics__list-item-value\">{good}</span>\n          </li>\n          <li className=\"Statistics__list-item\">\n            <span className=\"Statistics__list-item-title\">Neutral:</span>\n            <span className=\"Statistics__list-item-value\">{neutral}</span>\n          </li>\n          <li className=\"Statistics__list-item\">\n            <span className=\"Statistics__list-item-title\">Bad:</span>\n            <span className=\"Statistics__list-item-value\">{bad}</span>\n          </li>\n          <li className=\"Statistics__list-item\">\n            <span className=\"Statistics__list-item-title\">Total:</span>\n            <span className=\"Statistics__list-item-value\">{total}</span>\n          </li>\n          <li className=\"Statistics__list-item\">\n            <span className=\"Statistics__list-item-title\">\n              Positive feedback:\n            </span>\n            <span className=\"Statistics__list-item-value\">\n              {positivePercentage} %\n            </span>\n          </li>\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n};\n","import './FeedbackOptions.css';\nimport PropTypes from 'prop-types';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <section>\n      <ul className=\"FeedbackOptions__buttons\">\n        {options.map(({ id, name, value }, index) => (\n          <li key={index} className=\"FeedbackOptions__buttons-item\">\n            <button\n              key={id}\n              className=\"FeedbackOptions__button\"\n              value={value}\n              type=\"button\"\n              onClick={() => onLeaveFeedback(value)}\n            >\n              {name}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import './App.css';\nimport { useState } from 'react';\nimport Section from './components/Section/';\nimport Statistics from './components/Statistics/';\nimport FeedbackOptions from './components/FeedbackOptions/';\n\nexport default function App() {\n  const [bad, setBad] = useState(0);\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n\n  const onLeaveFeedback = value => {\n    switch (value) {\n      case 'bad':\n        setBad(state => state + 1);\n        break;\n      case 'good':\n        setGood(state => state + 1);\n        break;\n      case 'neutral':\n        setNeutral(state => state + 1);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return (good / (good + neutral + bad)) * 100;\n  };\n\n  const total = countTotalFeedback();\n  const positivePercentage = countPositiveFeedbackPercentage().toFixed(0);\n\n  const options = [\n    { id: 'id-1', name: 'Good', value: 'good' },\n    { id: 'id-2', name: 'Neutral', value: 'neutral' },\n    { id: 'id-3', name: 'Bad', value: 'bad' },\n  ];\n\n  return (\n    <div className=\"App\">\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={onLeaveFeedback} />\n\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positivePercentage={positivePercentage}\n        />\n      </Section>\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   feedbackChanged = newState => {\n//     setState({ newState });\n//   };\n\n//   onLeaveFeedback = value => {\n//     setState(prevState => {\n//       return { [value]: prevState[value] + 1 };\n//     });\n//   };\n\n//   countTotalFeedback = () => {\n//     let { good, neutral, bad } = state;\n//     return good + neutral + bad;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     let { good, neutral, bad } = state;\n\n//     return (good / (good + neutral + bad)) * 100;\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = state;\n//     const total = countTotalFeedback();\n//     const positivePercentage = countPositiveFeedbackPercentage().toFixed(\n//       0,\n//     );\n\n//     const options = [\n//       { id: 'id-1', name: 'Good', value: 'good' },\n//       { id: 'id-2', name: 'Neutral', value: 'neutral' },\n//       { id: 'id-3', name: 'Bad', value: 'bad' },\n//     ];\n\n//     return (\n//       <div className=\"App\">\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={options}\n//             onLeaveFeedback={onLeaveFeedback}\n//           />\n\n//           <Statistics\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             total={total}\n//             positivePercentage={positivePercentage}\n//             onChanged={feedbackChanged}\n//           />\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}